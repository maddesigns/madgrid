// CSS3 Flexbox Grid System

// Class naming
$mg-rowname:             'row'             !default; // Flex Container: flex-direction: row;
$mg-columnname:          'column'          !default; // Flex Container: flex-direction: column;
$mg-colname:             'col'             !default; // Flex Item
$mg-fixedmodname:        '--fixed'         !default; // Flex Item modifier postfix class name
$mg-hasnestedgridname:   'has-nested-grid' !default; // Helper class for nested grids

// Breakpoints
$mg-breaks: (
	--xs: 30em,
	--sm: 48em,
	--md: 64em,
	--lg: 75em
);

// Breakpoint where flexbox behavoir is active (set to NULL if always on)
$mg-activate-flex-break: map-get($mg-breaks, --xs)                         !default;

// Total Gutter (is split in half for left/right)
$mg-gutter:              1rem                                              !default;
// minimal content width of a flex item (default 'min-content'). Example: 10em
$mg-min-content-width:   'min-content'                                     !default;
// List of px values for fixed sized flex items
$mg-fixedsizes:          100, 200, 300, 400, 500, 600, 700, 800, 900, 1000 !default;
// List of % values for flexible sized flex items
$mg-flexsizes:           10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 25, 75   !default;
// fix Flexbugs for IE10, Safari & Android
$mg-fixbugs:             true                                              !default;
// single flex items (without --fixed* class) should use full width
$mg-stretch-only-childs: false                                              !default;


.#{$mg-rowname},
.#{$mg-columnname} {
	@if $mg-activate-flex-break != NULL {

		@media (min-width: $mg-activate-flex-break) {
			display: flex;
			height: 100%; // default way for 100% height flex-items children
		}

	} @else {
		display: flex;
		height: 100%; // default way for 100% height flex-items children
	}
}

.#{$mg-columnname} {
	flex-direction: column;
}

.#{$mg-colname} {
	flex: 1 0 0%;
	min-width: unquote($mg-min-content-width);

	@if $mg-gutter != 0 {
		padding: ($mg-gutter / 2);
	}

	@if $mg-stretch-only-childs {
		&:only-child {
			flex-basis: 100%;

			@if $mg-fixbugs {
				width: 100%;     // fixed Safari
				max-width: 100%; // fixed IE10
			}
		}
	}
}

.#{$mg-hasnestedgridname} {

	> * {
		@if $mg-gutter != 0 {
			margin: ($mg-gutter / -2);
		}
	}

	/* fallback for 100% height flex-items children (Safari, Android, IE) */
	@if $mg-fixbugs {
		display: flex;
		flex-direction: column;

		> * {
			flex-grow: 1;
		}
	}
}

@each $i in $mg-fixedsizes {
	.#{$mg-colname}#{$mg-fixedmodname}#{$i} {
		flex: 0 0 ($i * 1px);

		@if $mg-fixbugs {
			width: ($i * 1px);     // fixed Safari
			max-width: ($i * 1px); // fixed IE10
		}

		// assure fixed box size
		// maybe no padding?
		// padding: 0;

		// maybe box-sizing: content-box?
		box-sizing: content-box;
	}
}

// build responsive classes
@each $breakname, $breaksize in $mg-breaks {
	@media (min-width: $breaksize) {
		@each $i in $mg-flexsizes {
			.#{$mg-colname}#{$breakname}#{$i} {
				flex: 1 0 ($i * 1%);

				@if $mg-fixbugs {
					width: ($i * 1%);     // fixed Safari
					max-width: ($i * 1%); // fixed IE10
				}
			}
		}
	}
}

// ordering
.reverse-grid {
	&.#{$mg-rowname} {
		flex-direction: row-reverse;
	}
	&.#{$mg-columnname} {
		flex-direction: column-reverse;
	}
}

// build responsive classes
@each $breakname, $breaksize in $mg-breaks {
	@media (min-width: $breaksize) {
		@for $i from 0 through 10 {
			.#{$mg-colname}#{$breakname}-order#{$i} {
				order: $i;
			}
		}
	}
}

.#{$mg-colname}--orderfirst {
	order: -1;
}

.#{$mg-colname}--orderlast {
	order: 999;
}


%flex-grow0 {
	flex-grow: 0;
}
%flex-basis0 {
	flex-basis: 0;
}

// main positioning
.main-center {
	justify-content: center;

	&.#{$mg-columnname} {
		> * {
			@extend %flex-basis0;
		}
	}

	> * {
		@extend %flex-grow0;
	}
}

.main-start {
	justify-content: flex-start;

	&.#{$mg-columnname} {
		> * {
			@extend %flex-basis0;
		}
	}

	> * {
		@extend %flex-grow0;
	}
}

.main-end {
	justify-content: flex-end;

	&.#{$mg-columnname} {
		> * {
			@extend %flex-basis0;
		}
	}

	> * {
		@extend %flex-grow0;
	}
}

.main-space-between {
	justify-content: space-between;

	&.#{$mg-columnname} {
		> * {
			@extend %flex-basis0;
		}
	}

	> * {
		@extend %flex-grow0;
	}
}

.main-space-around {
	justify-content: space-around;

	&.#{$mg-columnname} {
		> * {
			@extend %flex-basis0;
		}
	}

	> * {
		@extend %flex-grow0;
	}
}

// cross positioning
.cross-center {
	align-items: center;

	> * {
		@extend %flex-grow0;
	}
}

.cross-start {
	align-items: flex-start;

	> * {
		@extend %flex-grow0;
	}
}

.cross-end {
	align-items: flex-end;

	> * {
		@extend %flex-grow0;
	}
}

.cross-stretch {
	align-items: stretch;

	> * {
		@extend %flex-grow0;
	}
}
